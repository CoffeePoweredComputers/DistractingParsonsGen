ListCreate: 
  [
    '{lst_name} = {{{elems}}}', 
    '{lst_name} = ({elems})'
  ]

# lst_name -> The name of the list to which we are appending.
# val -> The value we are appending to the list.
Append: 
  [
<<<<<<< HEAD
    '{lst_name} += {args}',
    '{last_name}.add({args})',
    '{last_name}.insert({args})',
    '{lst_name}.append[{args}]'
=======
    '{lst_name}.add({val})',
    '{lst_name}.append[{val}]'
>>>>>>> origin/master
  ]

# lst_name -> The name of the list to which we are appending.
# val -> The value we are appending to the list.
Extend:
  [
<<<<<<< HEAD
    '{lst_name} = {lst_name}.extend({args})',
    '{lst_name} = {lst_name}.extend[{args}]',
    '{lst_name}.extend[{args}]',
    '{lst_name}.extend([{args}])',
    '{lst_name}.add({args})'
  ]
CountExpr:
  [
    '{lst_name}.count({elem})',
    '{lst_name}.count[{elem}]',
    'len({lst_name}.count({elem}))',
    '{lst_name}.len({elem})',
    '{lst_name}({elem})'
  ]
CountAssign:
  [
    '{count_elem} = {lst_name}.count',
    '{count_elem} = {lst_name}({lst_name})',
    '{count_elem} = {lst_name}[{elem}]',
    '{count_elem} = {lst_name}.count[{elem}]'
=======

>>>>>>> origin/master
  ]

Count:
  # collection_name -> The name of the tuple or list we are counting elements in.
  # val -> The value we are counting instances of.
  Expr:
    [

    ]
  # collection_name -> The name of the tuple or list we are counting elements in.
  # val -> The value we are counting instances of.
  # var -> The variable we are storing the result of the expression into.
  Assign:
    [
      '{var} = {collection_name}({val})'
    ]
Index:
  # collection_name -> The name of the tuple or list we are counting elements in.
  # val -> The value we are counting instances of.
  # var -> The variable we are storing the result of the expression into.
  Assign:
    [
      '{var} = {collection_name}[{val}]'
    ]

Pop:
  # collection_name -> The list or dictionary we are modifying
  # key -> the index or key we are poping from the collection
  Expr:
    [
      '{collection_name}.remove({key})'
    ]
  # collection_name -> The list or dictionary we are modifying.
  # key -> The index or key we are poping from the collection.
  # elem -> The element that got removed from the collection.
  Assign:
    [

    ]

# collection_name -> The name of the list or dictionary
# val -> The value we are removing from the collection
Remove:
  [
    '{collection_name}.remove[{args}]',
    'del {collection_name}[{args}]',
    '{collection_name}.pop[{args}]',
    '{collection_name}.pop({args})'
      '{collection_name}.pop({val})'
  ]

# list_name -> The name of the list being operated on
# pos -> The index where we are inserting
# val -> The value we are inserting
Insert:
  [

  ]
Reverse:
  [
  ]
Sort:
  [
  ]
Sorted:
  [
  ]
SortReverse:
  [
  ]
Empty:
  [
    "{var_name} = []",
    "{var_name} = ()"
  ]
NonEmpty:
  [
    [":", "{var_name} = dict{{{args}}}"],
    ["=", "{var_name} = {{{args}}}"],
    ["=", "{var_name} = [{args}]"],
    [":", "{var_name} = {{{args}}}"],
    [":", "{var_name} = [{args}]"],
    [",", "{var_name} = {{{args}}}"],
    [",", "{var_name} = [{args}]"]
  ]
Delete:
  # var -> name of the dictionary
  # key -> the key:value pair we want to remove
  [
    "{var_name}.del[{key}]",
    "{var_name}.del({key})",
    "del {var_name}({key})",
    "{var_name}.pop[{key}]", #type
    "{var_name}.remove[{key}]", #attr
    "{var_name}.remove({key})" #attr
  ]

AddChangePair:
  # var -> name of the dictionary
  # key -> the key we are updating/adding
  # value -> the value we are updating/adding
  [
    "{var_name} = {{{key}, {value}}}", #assertion
    "{var_name} = {{{key}: {value}}}", #assertion
    "{var_name}[{value}] = {key}", #assertion
    "{var_name}.append({key}, {value})", #attribute error
    "{var_name}.update = {{{key}, {value}}}", #attribute error
    "{var_name}.update[{key}, {value}]", #TypeError
    "{var_name}.update({key})", #ValueError
  ]

Update:
  [
    [ ":", "{var_name} = {args}.update({var_name})"],
    [ ":", "{var_name}.add({args})"],
    [ ":", "{var_name} += {args}"],
    [ ":", "{var_name} + {args}"],
    [ ":", "{var_name}[{args}]"],
    [ ":", "{var_name}.update([{args}])"],
    [ ":", "{var_name}.union({args})"],
    [ ":", "{var_name} = {var_name}.update({args})"],
    [ ":", "{var_name} = {var_name}.update({args})"],
    [ ":", "{var_name} = {var_name}.update({{{args}}})"],
    [ ":", "{var_name}.update({args})"]
  ]
